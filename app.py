from flask import Flask, request, render_template, jsonify
import requests
from bs4 import BeautifulSoup
from datetime import datetime, timedelta
import random
import time
import json
import logging
import sqlite3
import google.generativeai as genai
from ratelimit import limits, sleep_and_retry

app = Flask(__name__, static_url_path='/static')

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è (–≤–∏–≤–µ–¥–µ–Ω–Ω—è –≤ –∫–æ–Ω—Å–æ–ª—å –¥–ª—è Render)
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# API –∫–ª—é—á—ñ (–∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Å–ø—Ä–∞–≤–∂–Ω—ñ–π –∫–ª—é—á —ñ–∑ weatherapi.com, —è–∫—â–æ —Ü–µ–π –Ω–µ –ø—Ä–∞—Ü—é—î)
WEATHER_API_KEYS = [
    "f84e4d7d3b9f4e2e9e4d7d3b9f4e2e9",
    "f84e4d7d3b9f4e2e9e4d7d3b9f4e2e9",
    "f84e4d7d3b9f4e2e9e4d7d3b9f4e2e9"
]
current_weather_key_idx = 0

# –ì–ª–æ–±–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–Ω—ñ
FISHING_DATA_CACHE = {"data": {}, "timestamp": {}}
WEATHER_CACHE = {}
WEATHER_CACHE_TIMESTAMP = {}
USER_CITIES = {}
USER_FISH = {}
USER_WATER_TYPE = {}
previous_pressure = {}

# –°–ø–∏—Å–æ–∫ —Ä–∏–± —ñ–∑ –¥–µ—Ç–∞–ª—å–Ω–æ—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é
FISH_TYPES = {
    "–ö–∞—Ä–∞—Å—å üê†": {
        "temp_opt": {"–≤–µ—Å–Ω–∞": (15, 20), "–ª—ñ—Ç–æ": (18, 25), "–æ—Å—ñ–Ω—å": (12, 18), "–∑–∏–º–∞": (5, 10)},
        "pressure_opt": (1000, 1015),
        "recipes": [
            "–ú–∞–Ω–∫–∞ + –º–µ–¥: 200 –≥ –º–∞–Ω–∫–∏, 50 –≥ –º–µ–¥—É, –∑–º—ñ—à–∞—Ç–∏ –∑ –≤–æ–¥–æ—é.",
            "–ì–æ—Ä–æ—Ö–æ–≤–∞ –∫–∞—à–∞: 300 –≥ –≥–æ—Ä–æ—Ö—É, –≤–∞—Ä–∏—Ç–∏ 2 –≥–æ–¥–∏–Ω–∏."
        ],
        "guide": {
            "description": "–ö–∞—Ä–∞—Å—å ‚Äî –ø—Ä—ñ—Å–Ω–æ–≤–æ–¥–Ω–∞ —Ä–∏–±–∞, —è–∫–∞ –ª—é–±–∏—Ç—å —Ç–µ–ø–ª—ñ –≤–æ–¥–æ–π–º–∏ –∑ –º—É–ª–∏—Å—Ç–∏–º –¥–Ω–æ–º.",
            "habitat": "–û–∑–µ—Ä–∞, —Å—Ç–∞–≤–∫–∏, –ø–æ–≤—ñ–ª—å–Ω—ñ —Ä—ñ—á–∫–∏.",
            "best_time": "–†–∞–Ω–æ–∫ –∞–±–æ –≤–µ—á—ñ—Ä —É —Ç–µ–ø–ª—É –ø–æ–≥–æ–¥—É (–ª—ñ—Ç–æ, —Ä–∞–Ω–Ω—è –æ—Å—ñ–Ω—å).",
            "tips": "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π –ª–µ–≥–∫—ñ —Å–Ω–∞—Å—Ç—ñ, —É–Ω–∏–∫–∞–π —Ä—ñ–∑–∫–∏—Ö —Ä—É—Ö—ñ–≤, –∫–∞—Ä–∞—Å—å –æ–±–µ—Ä–µ–∂–Ω–∏–π."
        }
    },
    "–ö–æ—Ä–æ–ø üêü": {
        "temp_opt": {"–≤–µ—Å–Ω–∞": (15, 25), "–ª—ñ—Ç–æ": (20, 28), "–æ—Å—ñ–Ω—å": (15, 22), "–∑–∏–º–∞": (8, 12)},
        "pressure_opt": (1000, 1020),
        "recipes": [
            "–ö—É–∫—É—Ä—É–¥–∑–∞ + –∞–Ω—ñ—Å: 300 –≥ –∫—É–∫—É—Ä—É–¥–∑–∏, 10 –∫—Ä–∞–ø–µ–ª—å –∞–Ω—ñ—Å–æ–≤–æ—ó –æ–ª—ñ—ó.",
            "–ú–∞–∫—É—Ö–∞: 250 –≥ –º–∞–∫—É—Ö–∏, –¥–æ–¥–∞—Ç–∏ –≤–æ–¥—É."
        ],
        "guide": {
            "description": "–ö–æ—Ä–æ–ø ‚Äî –≤–µ–ª–∏–∫–∞ —Ä–∏–±–∞, —è–∫–∞ –ø–æ—Ç—Ä–µ–±—É—î —Ç–µ—Ä–ø—ñ–Ω–Ω—è —Ç–∞ –º—ñ—Ü–Ω–∏—Ö —Å–Ω–∞—Å—Ç–µ–π.",
            "habitat": "–í–æ–¥–æ—Å—Ö–æ–≤–∏—â–∞, —Å—Ç–∞–≤–∫–∏, –≥–ª–∏–±–æ–∫—ñ —Ä—ñ—á–∫–∏.",
            "best_time": "–¢–µ–ø–ª—ñ –¥–Ω—ñ, –æ—Å–æ–±–ª–∏–≤–æ –ø—ñ—Å–ª—è –¥–æ—â—É.",
            "tips": "–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Å–æ–ª–æ–¥–∫—ñ –ø—Ä–∏–∫–æ—Ä–º–∫–∏, –∫–æ—Ä–æ–ø –ª—é–±–∏—Ç—å –∫—É–∫—É—Ä—É–¥–∑—É."
        }
    }
}

WATER_TYPES = ["–†—ñ—á–∫–∞ üåä", "–û–∑–µ—Ä–æ üèû", "–°—Ç–∞–≤–æ–∫ üêü", "–í–æ–¥–æ—Å—Ö–æ–≤–∏—â–µ ‚öì"]

# –¢–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–∞–∑–∏ –¥–∞–Ω–∏—Ö (—á–µ—Ä–µ–∑ –æ–±–º–µ–∂–µ–Ω–Ω—è Render)
"""
def init_db():
    try:
        conn = sqlite3.connect('fishing_bot.db')
        c = conn.cursor()
        c.execute('''CREATE TABLE IF NOT EXISTS user_history
                     (user_id TEXT, action TEXT, details TEXT, timestamp TEXT)''')
        conn.commit()
        conn.close()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–∏—Ö —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: {str(e)}")

init_db()
"""

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–µ—à—É
def is_cache_valid(fish, ttl=86400):
    return (datetime.now() - FISHING_DATA_CACHE["timestamp"].get(fish, datetime.min)).total_seconds() < ttl

# –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏
def fetch_weather(city_query, endpoint="current.json"):
    global current_weather_key_idx
    url = f"http://api.weatherapi.com/v1/{endpoint}?key={WEATHER_API_KEYS[current_weather_key_idx]}&q={city_query}&lang=uk"
    retries = 3
    for attempt in range(retries):
        try:
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                return response.json()
            elif response.status_code == 429 or response.status_code >= 500:
                current_weather_key_idx = (current_weather_key_idx + 1) % len(WEATHER_API_KEYS)
                time.sleep(2)
                continue
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –ø–æ–≥–æ–¥–∏: {str(e)}")
            if attempt < retries - 1:
                current_weather_key_idx = (current_weather_key_idx + 1) % len(WEATHER_API_KEYS)
                time.sleep(2)
    return {"error": {"message": "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–≥–æ–¥—É"}}

# –û–±—Ä–æ–±–Ω–∏–∫ –ø–æ–º–∏–ª–æ–∫ 500
@app.errorhandler(500)
def internal_error(error):
    logger.error(f"–ü–æ–º–∏–ª–∫–∞ 500: {str(error)}")
    return jsonify({"error": "–í–Ω—É—Ç—Ä—ñ—à–Ω—è –ø–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", "details": str(error)}), 500

# –ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞
@app.route('/')
def index():
    try:
        logger.info("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏")
        return render_template('index.html', fish_types=FISH_TYPES.keys(), water_types=WATER_TYPES)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏: {str(e)}")
        return jsonify({"error": "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≥–æ–ª–æ–≤–Ω–æ—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏", "details": str(e)}), 500

# –°—Ç–æ—Ä—ñ–Ω–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
@app.route('/settings')
def settings():
    try:
        logger.info("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å")
        return render_template('settings.html')
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å: {str(e)}")
        return jsonify({"error": "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å", "details": str(e)}), 500

# –°—Ç–æ—Ä—ñ–Ω–∫–∞ –ø–æ—Å—ñ–±–Ω–∏–∫–∞
@app.route('/fish_guide')
def fish_guide():
    try:
        logger.info("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø–æ—Å—ñ–±–Ω–∏–∫–∞")
        return render_template('fish_guide.html', fish_types=FISH_TYPES)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø–æ—Å—ñ–±–Ω–∏–∫–∞: {str(e)}")
        return jsonify({"error": "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å—Ç–æ—Ä—ñ–Ω–∫–∏ –ø–æ—Å—ñ–±–Ω–∏–∫–∞", "details": str(e)}), 500

# API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≥–æ–¥–∏
@app.route('/get_weather', methods=['POST'])
def get_weather():
    try:
        data = request.json
        city = data.get('city')
        water_type = data.get('water_type', "–û–∑–µ—Ä–æ üèû")
        user_id = data.get('user_id', 'default_user')

        if not city:
            logger.warning("–ú—ñ—Å—Ç–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ —É –∑–∞–ø–∏—Ç—ñ –Ω–∞ –ø–æ–≥–æ–¥—É")
            return jsonify({"error": "–ú—ñ—Å—Ç–æ –Ω–µ –≤–∫–∞–∑–∞–Ω–æ!"})

        USER_CITIES[user_id] = city
        USER_WATER_TYPE[user_id] = water_type

        current_time = datetime.now()
        last_update = WEATHER_CACHE_TIMESTAMP.get(user_id)
        if last_update and (current_time - last_update).total_seconds() < 1800:
            logger.info(f"–ü–æ–≥–æ–¥–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id} –≤–∑—è—Ç–∞ –∑ –∫–µ—à—É")
            cached_weather = WEATHER_CACHE[user_id]
            return jsonify(cached_weather)

        city_query = f"{city},–£–∫—Ä–∞—ó–Ω–∞"
        response = fetch_weather(city_query)
        if "error" not in response:
            current = response["current"]
            temp = current["temp_c"]
            desc = current["condition"]["text"]
            pressure = current["pressure_mb"]
            water_temp = temp - 3  # –°–ø—Ä–æ—â–µ–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∏ –≤–æ–¥–∏

            pressure_change = pressure - previous_pressure.get(user_id, pressure)
            previous_pressure[user_id] = pressure

            weather_data = {
                "temp": temp,
                "water_temp": water_temp,
                "desc": desc,
                "pressure": pressure,
                "pressure_change": pressure_change
            }
            WEATHER_CACHE[user_id] = weather_data
            WEATHER_CACHE_TIMESTAMP[user_id] = current_time
            logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≥–æ–¥—É –¥–ª—è {city}: {temp}¬∞C")
            return jsonify(weather_data)
        else:
            error_msg = response.get('error', {}).get('message', '–°–ø—Ä–æ–±—É–π –ø—ñ–∑–Ω—ñ—à–µ!')
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–æ–≥–æ–¥–∏: {error_msg}")
            return jsonify({"error": error_msg})
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–≥–æ–¥–∏: {str(e)}")
        return jsonify({"error": "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ–≥–æ–¥–∏", "details": str(e)}), 500

# API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ—Ü–µ–ø—Ç—ñ–≤
@app.route('/get_recipe', methods=['POST'])
def get_recipe():
    try:
        data = request.json
        fish = data.get('fish')
        user_id = data.get('user_id', 'default_user')

        if fish not in FISH_TYPES:
            logger.warning(f"–†–∏–±–∞ {fish} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞")
            return jsonify({"error": "–†–∏–±–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!"})

        USER_FISH[user_id] = [fish]
        recipe = random.choice(FISH_TYPES[fish]["recipes"])
        logger.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ —Ä–µ—Ü–µ–ø—Ç –¥–ª—è {fish}")
        return jsonify({"recipe": recipe})
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ä–µ—Ü–µ–ø—Ç—É: {str(e)}")
        return jsonify({"error": "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Ä–µ—Ü–µ–ø—Ç—É", "details": str(e)}), 500

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)